#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+auto_tangle: t
#+STARTUP: content

* Early init
Some early init code to run before everything started.
#+begin_src emacs-lisp :tangle ./early-init.el
  ;; in ~/.emacs.d/init.el (or ~/.emacs.d/early-init.el in Emacs 27)
  (setq package-enable-at-startup nil ; don't auto-initialize!
        ;; don't add that `custom-set-variables' block to my init.el!
        package--init-file-ensured t)

  ;;; Native compilation support (see http://akrl.sdf.org/gccemacs.html)
  (when (boundp 'native-comp-eln-load-path)
    ;; Don't store eln files in ~/.emacs.d/eln-cache
    ;; Use startup-redirect-eln-cache in Emacs 29
    (startup-redirect-eln-cache (expand-file-name (convert-standard-filename "var/eln-cache/")
                                                  user-emacs-directory)))

  (setq package-enable-at-startup nil) ; For Emacs version >= 27
  (setq inhibit-automatic-native-compilation t)

  ;; Integration of straight.el and flycheck.
  (setq straight-fix-flycheck t)

  ;; UI Customization
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t ; only for mouse events, which I seldom use
        use-file-dialog nil
        use-short-answers t
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t
        inhibit-startup-echo-area-message user-login-name ; read the docstring
        inhibit-startup-buffer-menu t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (blink-cursor-mode -1)
  ;; nice scrolling
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
  (size-indication-mode t) ; show size on mode line

  ;; Same idea as above for the `file-name-handler-alist' and the
  ;; `vc-handled-backends' with regard to startup speed optimisation.
  ;; Here I am storing the default value with the intent of restoring it
  ;; via the `emacs-startup-hook'.
  (defvar sin-emacs--file-name-handler-alist file-name-handler-alist)
  (defvar sin-emacs--vc-handled-backends vc-handled-backends)

  (setq file-name-handler-alist nil
        vc-handled-backends nil)

  ;; tweak native compilation settingss
  (setq native-comp-speed 2)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 1024 1024 20)
                    gc-cons-percentage 0.2
                    file-name-handler-alist sin-emacs--file-name-handler-alist
                    vc-handled-backends sin-emacs--vc-handled-backends)))

  ;; name the default frame as "home"
  ;; (add-hook 'after-init-hook (lambda () (set-frame-name "home")))
#+end_src
* Package Setup
** Straight & use-package
Use straight and use-package-compute-statistics to manage packages. These two packages should be loaded before any other files.
#+begin_src emacs-lisp
  ;; Straight.el bootstrap
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package) ; Load use-package
  (straight-use-package 'project) ; workaround for projectile + eglot
#+end_src
** Startup diagnostic
#+begin_src emacs-lisp
  ;; (setq use-package-compute-statistics t)

  ;; (use-package benchmark-init
  ;;   :straight t
  ;;   :config
  ;;   ;; To disable collection of benchmark data after init is done.
  ;;   (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
** Auto tangle
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :straight t
    :defer t
    :hook
    (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-babel-safelist '(
                                           "~/.emacs.d/config.org"
                                           )))
#+end_src
** Cleanup
#+begin_src emacs-lisp
  (use-package no-littering
    :straight t
    :config
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (when (fboundp 'startup-redirect-eln-cache)
      (startup-redirect-eln-cache
       (convert-standard-filename
  (expand-file-name  "var/eln-cache/" user-emacs-directory)))))
#+end_src
** Emacs
#+begin_src emacs-lisp
  ;; Make native compilation silent and prune its cache.
  (when (native-comp-available-p)
    (setq native-comp-async-report-warnings-errors 'silent) ; Emacs 28 with native compilation
    (setq native-compile-prune-cache t)) ; Emacs 29

  ;; Disable the damn thing by making it disposable.
  (setq custom-file (make-temp-file "emacs-custom-"))

  ;; Do not remind me of unsafe themes
  (setq custom-safe-themes t)

  (use-package emacs
    :bind
    ("C-c f p" . yu/find-file-in-private-config)
    ("C-c q r" . 'restart-emacs)
    ("C-c b b" . 'my/consult-buffer)
    ("C-c b B" . 'consult-buffer)
    ("C-c b k" . 'kill-current-buffer)
    :custom
    ;; TAB cycle if there are only few candidates
    (completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    (read-extended-command-predicate
     #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (tab-always-indent 'complete)

    ;; Enable recursive minibuffers
    (enable-recursive-minibuffers t)

    ;; Disable popup confirmations
    (use-dialog-box nil)
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Remember and restore the last cursor location of opened files
    ;; (save-place-mode 1)
    ;; (setq save-place-file (concat user-emacs-directory "var/saveplace"))

    ;; Revert buffers when the underlying file has changed
    (global-auto-revert-mode 1)
    :config
    (defalias 'yes-or-no-p 'y-or-n-p)
    ;; Disable auto-save
    (setq auto-save-default nil)

    ;; Disable backup-files
    (setq make-backup-files nil)
    (setq backup-inhibited nil)
    (setq create-lockfiles nil)

    ;; Default shell
    (setq shell-file-name "/bin/sh")
    (setq sh-shell-file "/bin/sh")

    ;; Frame title
    ;; Use current buffer name as frame title
    (setq frame-title-format "%b - Emacs")
    )
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind
    (("C-c g /" . magit-dispatch)
     ("C-c g ." . magit-file-dispatch)
     ("C-c g '" . forge-dispatch)
     ("C-c g g" . magit-status)
     ("C-c g G" . magit-status-here)
     ("C-c g x" . magit-file-delete)
     ("C-c g B" . magit-blame-addition)
     ("C-c g C" . magit-clone)
     ("C-c g F" . magit-fetch)
     ("C-c g L" . magit-log-buffer-file)
     ("C-c g S" . magit-stage-file)
     ("C-c g U" . magit-unstage-file)
  	 :map magit-mode-map
     ("t" . magit-previous-line)
     ("n" . magit-next-line)
     ("p" . magit-section-toggle))
    :config
    (setq magit-display-buffer-function
        #'magit-display-buffer-fullframe-status-v1)
    (setq magit-bury-buffer-function
  				(lambda (&optional buffer-to-bury)
  					(magit-mode-quit-window t)))
    )
#+end_src
** Environment
For mac, use =exec-path-from-shell= to get environment variables from shell environment.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :custom
    (exec-path-from-shell-debug t)
    (exec-path-from-shell-shell-name "/bin/zsh")
    :config
    (exec-path-from-shell-initialize))
#+end_src
** Amazon
Install =EmacsAmazonLibs= for work in Amazon. For more details about it, check internal [[https://w.amazon.com/bin/view/Emacs/][Emacs Wiki]]. Only enable this on work laptop.
#+begin_src emacs-lisp
  (when (equal (system-name) "7cf34dda6815")
     (straight-use-package
      '(EmacsAmazonLibs :type git
                        :host nil
                        :build t
                        :post-build (copy-file "emacs-amazon-libs/brazil-path-cache-artifacts"
                                               (straight--build-dir "EmacsAmazonLibs"))
                        :repo "ssh://git.amazon.com:2222/pkg/EmacsAmazonLibs")
      )

     (add-to-list 'load-path "~/.emacs.d/straight/repos/EmacsAmazonLibs/emacs-amazon-libs/")
     (use-package amz-common
       :straight (:host nil :repo "ssh://git.amazon.com/pkg/EmacsAmazonLibs"
                        :files ("emacs-amazon-libs/amz-common.el"
                                "emacs-amazon-libs/texi/*.texi"))
       )
     ;; integrate with brazil
     (use-package amz-brazil-config
       :straight (:host nil :repo "ssh://git.amazon.com/pkg/EmacsAmazonLibs"
                        :files ("emacs-amazon-libs/amz-brazil-config.el"))
       )
     (use-package amz-workspace
       :after amz-common
       :straight (:host nil :repo "ssh://git.amazon.com/pkg/EmacsAmazonLibs"
                        :files ("emacs-amazon-libs/amz-workspace.el"
                                "emacs-amazon-libs/amz-coral.el"
                                "emacs-amazon-libs/amz-bmds.el"
                                "emacs-amazon-libs/amz-brazil-cache.el"
                                "emacs-amazon-libs/amz-brazil-config-parser.el"
                                "emacs-amazon-libs/amz-shell.el"
                                "emacs-amazon-libs/brazil-path-cache-artifacts"))
       :custom (amz-workspace-default-root-directory "~/local/projects")
       )
     (use-package amz-package
       :after amz-workspace)
     (use-package amz-brazil-cache)
     ;; amazon q developer
     (use-package amz-q-chat
       :bind (("C-c q t" . 'amz-q-chat-toggle)
  	    ("C-c q q" . 'amz-q-chat-stop)
  	    ("C-c q r" . 'amz-q-chat-restart)))
     (use-package amz-q-ide
       :after lsp-mode
       :custom
       (amz-lsp-codewhisperer-program "~/repos/AmazonQNVim/language-server/build/aws-lsp-codewhisperer-token-binary.js")
       :config
       (amz-q-ide-setup)
       )

     ;; embark integration
     (use-package amz-embark
       :after embark)

     ;; amz-coral
     (use-package amz-coral)

     ;; smithy-mode
     (use-package smithy-mode)
     )
#+end_src

Use =brief=, which is an Emacs minor-mode that provides a transient interface for Brazil CLI.
#+begin_src emacs-lisp
  (use-package amz-brief
    :straight '(amz-brief :type git :host nil :repo "ssh://git.amazon.com:2222/pkg/Brief")
    :defer t
    :bind (:map amz-brief-mode-map
             ("C-<tab>" . amz-brief))
    :config
    (setq amz-brief-default-host "zkli-clouddesk.aka.corp.amazon.com"
          amz-brief-remote-workplace-dir "~/workplace"
          amz-brief-preferred-development-style "HYBRID"
          amz-brief-autosave-custom-commands t))
#+end_src
#+end_src
* Completion
** Corfu
Corfu enhances in-buffer completion with a small completion popup. It hooks to ~completion-in-region~ and will show a popup window showing all possible completion candidates based on the context. Corfu is the base for other packages that provide complition inside buffer, so it should be loaded first.
#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :custom
    (corfu-cycle t)
    (corfu-quit-no-match 'separator)
    (corfu-preselect 'valid)
    ;; auto completion settings
    (corfu-auto t)
    (completion-cycle-threshold 3) ;; use tab to cycle when with a few candidate
    (tab-always-indent 'complete) ;; tab will try to indent, then complete
    ;; Emacs 30: Disable Ispell completion
    (text-mode-ispell-word-completion nil)
    
    :bind
    (:map corfu-map
  	("S-SPC" . corfu-insert-separator)
  	("TAB" . corfu-next)
          ([tab] . corfu-next)
          ("S-TAB" . corfu-previous)
          ([backtab] . corfu-previous))

    :hook
    (minibuffer-setup . corfu-enable-in-minibuffer)
    (eshell-mode . corfu-enable-in-shell)
    (meow-insert-exit . corfu-quit)

    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode)

    :config
    ;; enable corfu in M-: or M-!
    (defun corfu-enable-in-minibuffer ()
      "Enable Corfu in the minibuffer."
      (when (local-variable-p 'completion-at-point-functions)
        ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
        (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                    corfu-popupinfo-delay nil)
        (corfu-mode 1)))

    (defun corfu-enable-in-shell ()
      "Corfu in shell similar to normal shell completion behavior."
      (setq-local corfu-auto nil)
      (corfu-mode))

    ;; Config for tab-and-go style
    (dolist (c (list (cons "SPC" " ")
                     (cons "," ",")
                     (cons ")" ")")
                     (cons "}" "}")
                     (cons "]" "]")))
      (define-key corfu-map (kbd (car c)) `(lambda ()
                                             (interactive)
                                             (corfu-insert)
                                             (insert ,(cdr c)))))

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)
    
    ;; ignore casing
    (setq completion-ignore-case t)
    (setq read-buffer-completion-ignore-case t)
    (setq read-file-name-completion-ignore-case t)
    (setq-default case-fold-search t)

    ;; Sort by input history
    (with-eval-after-load 'savehist
      (corfu-history-mode 1)
      (add-to-list 'savehist-additional-variables 'corfu-history))
    )

  ;; Use corfu even in ternimal
  (use-package corfu-terminal
    :straight t
    :after corfu
    :init
    (unless (display-graphic-p)
      (corfu-terminal-mode +1)))

  ;; Show doc of selected candidate
  (use-package corfu-popupinfo
    :load-path "straight/build/corfu/extensions/"
    :hook (corfu-mode . corfu-popupinfo-mode))
#+end_src
*** Icons before candidates
Show icons before corfu candidates. Icons are from svg-lib, and the ~kind-icon-default-style~ depends on what font you are using for candidates.
#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :straight t
    :after corfu
    :init
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
*** Completion At Point Extensions (CAPE)
Cape provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI. The completion backends used by ~completion-at-point~ are so called ~completion-at-point-functions~ (Capfs).
#+begin_src emacs-lisp
  ;; Add extensions
  (use-package cape
    :straight t
    :after corfu
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("M-p p" . completion-at-point) ;; capf
           ("M-p t" . complete-tag)        ;; etags
           ("M-p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("M-p h" . cape-history)
           ("M-p f" . cape-file)
           ("M-p k" . cape-keyword)
           ("M-p s" . cape-symbol)
           ("M-p a" . cape-abbrev)
           ("M-p l" . cape-line)
           ("M-p w" . cape-dict)
           ("M-p \\" . cape-tex)
           ("M-p _" . cape-tex)
           ("M-p ^" . cape-tex)
           ("M-p &" . cape-sgml)
           ("M-p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; NOTE: The order matters!
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    :config
    ;; The advices are only needed on Emacs 28 and older.
    (when (< emacs-major-version 29)
      ;; Silence the pcomplete capf, no errors or messages!
      (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

      ;; Ensure that pcomplete does not write to the buffer
      ;; and behaves as a pure `completion-at-point-function'.
      (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
    )
#+end_src
** Vertico
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. Although vertico can be used as ~completion-at-point~, it is only used to complete mini-buffer prompt in this configuration.
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :init
    (vertico-mode))

  ;; enable recursive minibuffer
  ;; it allows me to execute another command (`M-:') if I forgot to run it
  ;; before the entering command (`M-x').
  (setq enable-recursive-minibuffers t)
  (setq read-minibuffer-restore-windows nil) ; Emacs 28
  (minibuffer-depth-indicate-mode 1)

  (setq minibuffer-default-prompt-format " [%s]") ; Emacs 29
  (minibuffer-electric-default-mode 1)

  ;; keep previous part of ~/.emacs.d/config.org/~/Project.
  ;; this is useful combined with partial-completion style
  (file-name-shadow-mode 1)
#+end_src
** Orderless
#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :straight t
    :config
    (defun orderless-fast-dispatch (word index total)
      (and (= index 0) (= total 1) (length< word 4)
  	 `(orderless-regexp . ,(concat "^" (regexp-quote word)))))

    (orderless-define-completion-style orderless-fast
      (orderless-style-dispatchers '(orderless-fast-dispatch))
      (orderless-matching-styles '(orderless-literal orderless-regexp)))

    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides
  	'((file (styles . (basic partial-completion orderless)))
            (bookmark (styles . (basic substring)))
            (library (styles . (basic substring)))
            (embark-keybinding (styles . (basic substring)))
            (imenu (styles . (basic substring orderless)))
            (consult-location (styles . (basic substring orderless)))
            (kill-ring (styles . (emacs22 orderless)))
            (eglot (styles . (emacs22 substring orderless)))))
    )

  ;; Support Pinyin with pinyinlib
  (use-package pinyinlib
    :straight t
    :config
    (defun completion--regex-pinyin (str)
      (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))
#+end_src
** Marginalia
Marginalia provide additional infos about commands. It integrate with vertico and will show simple docs based on the command's type in vertical layout.
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :straight t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be actived in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src
** Embark
#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)
     :map embark-org-link-map
     ("RET" . org-open-at-point-global)
     ("o"   . jv-org-open-link-string-in-side-window))
    ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    :config
    ;; Open the link in the side window using embark-act
    (defun jv-get-create-side-window ()
      "Return side window, or create one."
      (when (one-window-p)
        (split-window-horizontally))
      (or (window-in-direction 'right)
          (window-in-direction 'left)
          (selected-window)))
    ;; teach embark to visit org links:
    (defun embark-target-org-link-at-point ()
      "Teach embark to reconize org links at point."
      (when (org-in-regexp org-link-any-re)
        (cons 'org-link (match-string-no-properties 0))))
    (defun jv-org-open-link-string-in-side-window (s)
      (select-window (jv-get-create-side-window))
      (org-link-open-from-string s))

    (advice-add 'org-open-at-point-global :before #'push-mark)
    (add-to-list 'embark-target-finders
                 #'embark-target-org-link-at-point)
    (add-to-list 'embark-keymap-alist
                 '(org-link . embark-org-link-map))

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src
** Tempel
Tiny template package alternative to ~yasnippet~. It is light-weight and use the syntax of the Emacs Tempo library.
#+begin_src emacs-lisp
  (use-package tempel
    :straight t
    ;; Require trigger prefix before template name when completing.
    :custom
    (tempel-trigger-prefix ">")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-complete
                        completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    (global-tempel-abbrev-mode)
    )

  ;; Optional: Add tempel-collection.
  ;; The package is young and doesn't have comprehensive coverage.
  (use-package tempel-collection
    :straight t
    :after tempel)

  (use-package lsp-snippet-tempel
    :straight (lsp-snippet-tempel :type git
                                  :host github
                                  :repo "svaante/lsp-snippet")
    :after lsp-mode
    :config
    (when (featurep 'lsp-mode)
      ;; Initialize lsp-snippet -> tempel in lsp-mode
      (lsp-snippet-tempel-lsp-mode-init))
    (when (featurep 'eglot)
      ;; Initialize lsp-snippet -> tempel in eglot
      (lsp-snippet-tempel-eglot-init)))

#+end_src
** YASnippet
#+begin_src emacs-lisp :tangle no
  (use-package yasnippet
    :straight t
    :disabled t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :straight t
    :after yasnippet)
#+end_src
* Search
** Isearch
#+begin_src emacs-lisp
  (use-package isearch
    :defer t
    :bind
    (:map isearch-mode-map
  	("M-/" . 'isearch-complete))
    :config
    ;; use SPC to combine two seaorch regexp instead of one.*two,
    ;; similar to orderless
    (setq search-whitespace-regexp ".*?" ; one `setq' here to make it obvious they are a bundle
          isearch-lax-whitespace t
          isearch-regexp-lax-whitespace nil)
    
    (setq search-highlight t)
    (setq isearch-lazy-highlight t)
    (setq lazy-highlight-initial-delay 0.5)
    (setq lazy-highlight-no-delay-length 4)

    ;; add a total count for search (like 5/20)
    (setq isearch-lazy-count t)
    (setq lazy-count-prefix-format "(%s/%s) ")
    (setq lazy-count-suffix-format nil))
#+end_src
** Occur buffer
#+begin_src emacs-lisp
  (setq list-matching-lines-jump-to-current-line nil) ; do not jump to current line in `*occur*' buffers
  (add-hook 'occur-mode-hook #'hl-line-mode)
#+end_src
* Helper functions
** Consult
A very good package which provide a number of functions that enhance or add functionalities to builtin Emacs functions. I override some built-in keybinding with consult, such as ~imenu~ to ~consult-imenu~, which is simply more powerful.
#+begin_src emacs-lisp
  (use-package consult
    :straight t
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :bind (("C-x b"   . 'consult-buffer)
           ("C-c f i" . 'consult-imenu)
           ("C-c f b" . 'consult-bookmark)
           ("C-c f m" . 'consult-mark)
           ("C-c f o" . 'consult-outline)
           ("C-c f r" . 'consult-recent-file)
           ("C-c f l" . 'consult-line)
           ("C-c f L" . 'consult-line-multi)
           ("C-c f g" . 'consult-ripgrep)
           ("C-c f f" . 'consult-find)
           ("C-c f F" . 'consult-locate)
           ("C-c f h" . 'consult-complex-command)
           ("C-c f c" . 'consult-mode-command)
           ("C-c f a" . 'consult-org-agenda)
           ("C-c s f" . 'consult-focus-lines)
           ("C-c s m" . 'consult-minor-mode-menu)
           :map org-mode-map
           ("C-c f o" . 'consult-org-heading)
           :map help-map
           ("t" . 'consult-theme))
    :init
    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    
    :config
    (setq consult-buffer-filter `(,@consult-buffer-filter
  				"\\`\\*Async-native-compile-log\\*\\'"
  				"\\`\\*straight-process\\*\\'"
  				"\\`\\*dashboard\\*\\'"
  				"\\`\\*.*\\*\\'"))
    (setq-default consult-preview-key 'any)
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Load projectile projects
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root)))

    (defun consult-info-emacs ()
      "Search through Emacs info pages."
      (interactive)
      (consult-info "emacs" "efaq" "elisp" "cl" "compat"))

    (defun consult-info-org ()
      "Search through the Org info page."
      (interactive)
      (consult-info "org"))

    (defun consult-info-completion ()
      "Search through completion info pages."
      (interactive)
      (consult-info "vertico" "consult" "marginalia" "orderless" "embark"
                    "corfu" "cape" "tempel")))

  ;; Enable when use with embark
  (use-package embark-consult
    :straight t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  ;; Integrate with flycheck
  (use-package consult-flycheck
    :straight t
    :after (flycheck consult)
    :bind
    ("C-c e e" . 'consult-flycheck))

  ;; Integrate with projectile
  (use-package consult-projectile
    :straight (consult-projectile
  	     :type git :host gitlab
  	     :repo "OlMon/consult-projectile" :branch "master")
    :defer t
    :bind
    ("C-c p p" . 'consult-projectile)
    ("C-c p b" . 'consult-project-buffer)
    ("C-c p e" . 'consult-projectile-recentf)
    ("C-c p f" . 'consult-projectile-find-file)
    ("C-c p d" . 'consult-projectile-find-dir)
    )
#+end_src
** Dash
#+begin_src emacs-lisp
  (use-package dash
    :straight t)
#+end_src
** My functions
#+begin_src emacs-lisp
  (defun yu/find-file-in-private-config ()
    "Search for a file in `doom-user-dir'."
    (interactive)
    (dired-find-file user-emacs-directory))

  (defun yu/nixos-get-package-path (package)
    "Find package path in store in NixOS."
    (setq command (format "fd -d 1 %s /nix/store -t directory -1 -0" package))
    (substring (shell-command-to-string command) 0 -1))
#+end_src
* Save and persistence
** Savehist
Save mini-buffer history. Vertico sorts by history position.
#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :defer t
    :custom
    (history-length 100)
    (history-delete-duplicates t)
    (savhehist-shaveh-minibuffer-history t)
    (savehist-additional-variables '(register-alist kill-ring))
    :init
    (savehist-mode 1))
#+end_src
** Recentf
Save recent opened file histoy. The default save file is configured by ~no-littering~.
#+begin_src emacs-lisp
  (use-package recentf
    :after (no-littering org)
    :config
      ;; Put all recentf files together
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-var-directory))
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-etc-directory))
    (add-to-list 'recentf-exclude
                 (concat org-directory "todo.org"))
    (add-to-list 'recentf-exclude
                 (concat org-directory "index.org")))
#+end_src
* Prog
** Checker
*** Flycheck
Flycheck is a syntax cheker package besides build-in ~flymake~. It supports more languages, has more features and probably faster (not tested myself).
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :hook
    ;; Disable emacs-lisp-checkers in org code block
    (org-src-mode . (lambda ()
                      (setq-local flycheck-disabled-checkers
                                  '(emacs-lisp
                                    emacs-lisp-checkdoc))))
    :init (global-flycheck-mode))
#+end_src
*** Spelling
#+begin_src emacs-lisp
  (use-package jinx
    :straight t
    :hook ((text-mode . jinx-mode)
  	 (prog-mode . jinx-mode)
  	 (conf-mode . jinx-mode))
    :bind (("M-$" . jinx-correct)
  	 ("C-M-$" . jinx-languages)))
#+end_src
** xref
#+begin_src emacs-lisp
  (use-package xref
    :config
    (setq xref-search-program 'ripgrep
  	xref-history-storage 'xref-window-local-history))
#+end_src
** LSP
*** eglot
#+begin_src emacs-lisp :tangle no
  (use-package eglot
    :hook ((java-mode . eglot-ensure)
  	 (python-mode . eglot-ensure)
  	 (rust-mode . eglot-ensure))
    :defer t
    :bind (:map eglot-mode-map
  	      ("C-c c r" . eglot-rename)
  	      ("C-c c a" . eglot-code-actions)
  	      ("C-c c d" . xref-find-definitions)
  	      ("C-c c f" . eglot-format))
    :custom
    (eglot-autoshutdown t)
    :config
    (add-to-list 'eglot-server-programs
  	       '(nix-mode . ("nixd")))
    (setq completion-category-overrides '((eglot (styles orderless))
                                        (eglot-capf (styles orderless))))
    (defun my/eglot-capf ()
      (setq-local completion-at-point-functions
  		(list (cape-capf-super
                         #'eglot-completion-at-point
                         #'tempel-expand
                         #'cape-file))))

    (add-hook 'eglot-managed-mode-hook #'my/eglot-capf)

    (defun husain-eglot-generate-workspace-folders (server)
      "Generate the workspaceFolders value for the workspace.

  This is implemented by returning the content of .bemol/ws_root_folders file"
      (let* ((root (project-root (project-current)))
             (ws-root (file-name-parent-directory
                       (file-name-parent-directory root)))
             (bemol-root (file-name-concat ws-root ".bemol/"))
             (bemol-ws-root-folders (file-name-concat bemol-root "ws_root_folders"))
             (ws-root-folders-content)
             (ws-folders-for-eglot))
        (if (not (file-exists-p bemol-ws-root-folders))
            (eglot-workspace-folders server))
        (setq ws-root-folders-content (with-temp-buffer
                                        (insert-file-contents bemol-ws-root-folders)
                                        (split-string (buffer-string) "\n" t)))
        (setq ws-folders-for-eglot (mapcar (lambda (o) (concat "file://" o))
                                           ws-root-folders-content))
        (vconcat ws-folders-for-eglot)))

    (add-to-list 'eglot-server-programs
                 `(java-mode
     . ("jdtls"
                      ;; The following allows jdtls to find definition
                      ;; if the code lives outside the current project.
                      :initializationOptions
                      ,(lambda (server)
                         `(:workspaceFolders ,(husain-eglot-generate-workspace-folders server)
                           :extendedClientCapabilities
                           (:classFileContentsSupport t
                                                      :classFileContentsSupport t
                   :overrideMethodsPromptSupport t
                   :hashCodeEqualsPromptSupport t
                   :advancedOrganizeImportsSupport t
                   :generateToStringPromptSupport t
                   :advancedGenerateAccessorsSupport t
                   :generateConstructorsPromptSupport t
                   :generateDelegateMethodsPromptSupport t
                   :advancedExtractRefactoringSupport t
                                                      :moveRefactoringSupport t
                   :clientHoverProvider t
                   :clientDocumentSymbolProvider t
                   :advancedIntroduceParameterRefactoringSupport t
                   :actionableRuntimeNotificationSupport t
                                                      :extractInterfaceSupport t
                                                      :advancedUpgradeGradleSupport t))))))

  ;; The jdt server sometimes returns jdt:// scheme for jumping to definition
  ;; instead of returning a file. This is not part of LSP and eglot does not
  ;; handle it. The following code enables eglot to handle jdt files.
  ;; See https://github.com/yveszoundi/eglot-java/issues/6 for more info.
    (defun jdt-file-name-handler (operation &rest args)
      "Support Eclipse jdtls `jdt://' uri scheme."
      (let* ((uri (car args))
             (cache-dir "/tmp/.eglot")
             (source-file
              (directory-abbrev-apply
               (expand-file-name
                (file-name-concat
                 cache-dir
                 (save-match-data
                   (when (string-match "jdt://contents/\\(.*?\\)/\\(.*\\)\.class\\?" uri))
                   (message "URI:%s" uri)
                   (format "%s.java" (replace-regexp-in-string "/" "." (match-string 2 uri) t t))))))))
        (unless (file-readable-p source-file)
          (let ((content (jsonrpc-request (eglot-current-server) :java/classFileContents (list :uri uri)))
                (metadata-file (format "%s.%s.metadata"
                                       (file-name-directory source-file)
                                       (file-name-base source-file))))
            (message "content:%s" content)
            (unless (file-directory-p cache-dir) (make-directory cache-dir t))
            (with-temp-file source-file (insert content))
            (with-temp-file metadata-file (insert uri))))
        source-file))

    (add-to-list 'file-name-handler-alist '("\\`jdt://" . jdt-file-name-handler))

    (defun jdthandler--wrap-legacy-eglot--path-to-uri (original-fn &rest args)
    "Hack until eglot is updated.
  ARGS is a list with one element, a file path or potentially a URI.
  If path is a jar URI, don't parse. If it is not a jar call ORIGINAL-FN."
    (let ((path (file-truename (car args))))
      (if (equal "jdt" (url-type (url-generic-parse-url path)))
          path
        (apply original-fn args))))

    (defun jdthandler--wrap-legacy-eglot--uri-to-path (original-fn &rest args)
      "Hack until eglot is updated.
  ARGS is a list with one element, a URI.
  If URI is a jar URI, don't parse and let the `jdthandler--file-name-handler'
  handle it. If it is not a jar call ORIGINAL-FN."
      (let ((uri (car args)))
        (if (and (stringp uri)
                 (string= "jdt" (url-type (url-generic-parse-url uri))))
            uri
          (apply original-fn args))))
    
    (defun jdthandler-patch-eglot ()
      "Patch old versions of Eglot to work with Jdthandler."
      (interactive) ;; TODO, remove when eglot is updated in melpa
      (unless (and (advice-member-p #'jdthandler--wrap-legacy-eglot--path-to-uri 'eglot--path-to-uri)
                   (advice-member-p #'jdthandler--wrap-legacy-eglot--uri-to-path 'eglot--uri-to-path))
        (advice-add 'eglot--path-to-uri :around #'jdthandler--wrap-legacy-eglot--path-to-uri)
        (advice-add 'eglot--uri-to-path :around #'jdthandler--wrap-legacy-eglot--uri-to-path)
        (message "[jdthandler] Eglot successfully patched.")))

    ;; invoke
    (jdthandler-patch-eglot)
  )

  (use-package eglot-java-lombok
    :straight (eglot-java-lombok :type git :host github :repo "ltylty/eglot-java-lombok")
    :after eglot
    :config
    (eglot-java-lombok/init))
#+end_src
*** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :hook (((java-mode java-ts-mode) . lsp-deferred)
  	 (python-mode . lsp-deferred)
  	 (rust-mode . lsp-deferred)
  	 (lsp-completion-mode . yu/lsp-mode-setup-completion))
    :init
    (defun yu/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless)) ;; Configure orderless
      (setq-local completion-at-point-functions
  		(list (cape-capf-buster
                         #'lsp-completion-at-point))))
    :bind (:map lsp-mode-map
  	      ("C-c c a" . lsp-execute-code-action)
                ("C-c c r" . lsp-rename)
                ("C-c c f" . lsp-format-buffer)
                ("C-c c d" . lsp-find-definition)
                ("C-c c D" . lsp-find-declaration)
                ("C-c c I" . lsp-find-implementation)
                ("C-c c T" . lsp-find-type-definition)
                ("C-c c R" . lsp-find-references)
                ("C-c c h" . lsp-describe-thing-at-point)
                ("C-c c s" . lsp-workspace-symbol)
                ("C-c c S" . lsp-document-symbol)
                ("C-c c o" . lsp-organize-imports)
                ("C-c c x" . lsp-diagnostics)
                ("C-c c n" . lsp-flycheck-next-error)
                ("C-c c p" . lsp-flycheck-previous-error)
                ("C-c c SPC" . lsp-signature-help)
                ("C-c c !"   . lsp-restart-workspace))
    :commands (lsp lsp-deferred)
    :custom
    (lsp-enable-file-watchers t)
    (lsp-completion-provider :none) ;; use corfu instead
    (lsp-use-plists t)
    (read-process-output-max (* 1024 1024)) ;; increase the amount of data reads from the process
    (lsp-log-io nil) ;; only enable logging when debugging
    :config
    ;; custom file watch ignored files
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\build\\'")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.bemol\\'")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\env\\'")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\generated-src\\'")
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\generated-tst\\'")
    )

  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode
    :bind (:map lsp-ui-mode-map
  	      ([remap xref-find-definitions] . 'lsp-ui-peek-find-definitions)
  	      ([remap xref-find-references] . 'lsp-ui-peek-find-references))
    :custom
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-show-directory t)
    )

  (use-package lsp-treemacs
    :straight
    :after lsp-ui
    :init
    (lsp-treemacs-sync-mode)
    :bind (:map lsp-mode-map
  	      ("C-c c e" . 'lsp-treemacs-errors-list)))
#+end_src
Enable plist in =early-init.el=.
#+begin_src emacs-lisp :tangle ./early-init.el
  (setenv "LSP_USE_PLISTS" "true")
#+end_src

Enable [[https://github.com/blahgeek/emacs-lsp-booster?tab=readme-ov-file][emacs-lsp-booster]] for =lsp-mode= to improve performance.
#+begin_src emacs-lisp
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
  (advice-add (if (progn (require 'json)
                         (fboundp 'json-parse-buffer))
                  'json-parse-buffer
                'json-read)
              :around
              #'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
              (setcar orig-result command-from-exec-path))
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src
** Copilot
Use ~copilot~ to provide code completion. It is a language server that provides completion and other features for many languages.
#+begin_src emacs-lisp
  (use-package copilot
    :unless (eq system-type 'darwin)
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
  	:defer t
  	:hook (prog-mode . copilot-mode)
  	:bind (:map copilot-completion-map
  							("C-e" . +copilot-complete)
  							("M-f" . +copilot-complete-word))
  	:config
  	(setq copilot-indent-offset-warning-disable t)
   
  	(defun +copilot-complete ()
      (interactive)
      (or (copilot-accept-completion)
          (mwim-end-of-code-or-line)))

    (defun +copilot-complete-word ()
      (interactive)
      (or (copilot-accept-completion-by-word 1)
          (forward-word))))
#+end_src
* Editor
** Meow
#+begin_src emacs-lisp
  (use-package meow
    :straight t
    :config
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvorak)
      (meow-leader-define-key
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-motion-overwrite-define-key
       ;; custom keybinding for motion state
       '("<escape>" . ignore))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("<" . meow-beginning-of-thing)
       '(">" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-line)
       '("E" . meow-goto-line)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-join)
       '("J" . meow-page-down)
       '("K" . meow-page-up)
       '("k" . meow-kill)
       '("l" . meow-till)
       '("m" . meow-mark-word)
       '("M" . meow-mark-symbol)
       '("n" . meow-next)
       '("N" . meow-next-expand)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("t" . meow-prev)
       '("T" . meow-prev-expand)
       '("q" . meow-quit)
       '("Q" . consult-goto-line) ; Consult goto-line with live preview
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("p" . meow-search)
       '("s" . meow-right)
       '("S" . meow-right-expand)
       '("u" . meow-undo)
       '("U" . undo-redo)
       '("v" . meow-visit)
       '("w" . meow-next-word)
       '("W" . meow-next-symbol)
       '("x" . meow-save)
       '("X" . meow-sync-grab)
       '("y" . meow-yank)
       '("Y" . consult-yank-from-kill-ring) ; Consult view yank history
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<f5>" . consult-kmacro) ; Consult kmacro
       '("<escape>" . ignore)))
    (meow-setup)
    (meow-global-mode 1)
  	)
#+end_src
** Parenthesis
#+begin_src emacs-lisp
  (use-package electric-pair
    :hook
    (prog-mode . electric-pair-mode))

  ;; Puni for customizable soft deletion methods
  (use-package puni
    :straight t
    :defer t
    :hook
    (term-mode . puni-disable-puni-mode)
    :init
    (puni-global-mode)
    :bind (("C-c e (" . 'puni-wrap-round)
  	 ("C-c e )" . 'puni-wrap-round)
  	 ("C-c e {" . 'puni-wrap-curly)
  	 ("C-c e }" . 'puni-wrap-curly)
  	 ("C-c e [" . 'puni-wrap-square)
  	 ("C-c e ]" . 'puni-wrap-square)
  	 ("C-h" . 'puni-force-delete))
    :config
    (defun puni-kill-line ()
      "Kill a line forward while keeping expressions balanced."
      (interactive)
      (puni-soft-delete-by-move
       ;; FUNC: `puni-soft-delete-by-move` softly deletes the region from
       ;; cursor to the position after calling FUNC.
       (lambda ()
         (if (eolp) (forward-char) (end-of-line)))
       ;; STRICT-SEXP: More on this later.
       'strict-sexp
       ;; STYLE: More on this later.
       'within
       ;; KILL: Save deleted region to kill-ring if non-nil.
       'kill
       ;; FAIL-ACTION argument is not used here.
       'delete-one
       ))
    (setq puni-confirm-when-delete-unbalanced-active-region nil)
    )
#+end_src
** Undo-Redo
#+begin_src emacs-lisp
  (use-package undo-fu
    :straight t
    :config
    (global-unset-key (kbd "C-/"))
    (global-set-key (kbd "C-/")   'undo-fu-only-undo)
    (global-set-key (kbd "C-S-/") 'undo-fu-only-redo))

  ;; Save undo-tree information across session
  (use-package undo-fu-session
    :straight t
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'"
  					     "/git-rebase-todo\\'"))
    (undo-fu-session-global-mode))
#+end_src
** Code folding
#+begin_src emacs-lisp
  (use-package treesit-fold
    :straight (treesit-fold :type git :host github :repo "emacs-tree-sitter/treesit-fold")
    :bind (:map treesit-fold-mode-map
  	      ("C-c @ t" . 'treesit-fold-toggle)
  	      ("C-c @ o" . 'treesit-fold-open-recursively)
  	      ("C-c @ O" . 'treesit-fold-open-all)
  	      ("C-c @ c" . 'treesit-fold-close)
  	      ("C-c @ C" . 'treesit-fold-close-all))
    :init
    (global-treesit-fold-mode))
#+end_src
** Rime
#+begin_src emacs-lisp
  (use-package rime
    :straight (rime :type git
                    :host github
                    :repo "DogLooksGood/emacs-rime"
                    :files ("*.el" "Makefile" "lib.c"))
  	:disabled
    :custom
    (default-input-method "rime")
    ;; Custom lib path for NixOS
    (rime-share-data-dir "/usr/share/rime-data")
    (rime-emacs-module-header-root (concat (yu/nixos-get-package-path "emacs-pgtk") "include"))
    (rime-librime-root (yu/nixos-get-package-path "librime"))
    ;; :hook
    ;; (input-method-activate . (lambda () (shell-command "hyprctl switchxkblayout keychron-keychron-v1 1")))
    ;; (input-method-deactivate . (lambda () (shell-command "hyprctl switchxkblayout keychron-keychron-v1 0")))
    :config
    (defun rime-predicate-meow-mode-p ()
      "Detect whether the current buffer is in `meow' state.
      Include `meow-normal-state' ,`meow-motion-state' , `meow-keypad-state'.
      Can be used in `rime-disable-predicates' and `rime-inline-predicates'."
      (and (fboundp 'meow-mode)
           (or (meow-normal-mode-p)
               (meow-keypad-mode-p)
               (meow-motion-mode-p))))
    (setq rime-disable-predicates
          '(rime-predicate-meow-mode-p
            rime-predicate-after-alphabet-char-p
            rime-predicate-tex-math-or-command-p
            rime-predicate-punctuation-after-space-cc-p
            rime-predicate-prog-in-code-p
  	  rime-predicate-ace-window-p
  	  rime-predicate-current-uppercase-letter-p
            ;; rime-predicate-punctuation-line-begin-p
            ;; rime-predicate-current-uppercase-letter-p
            ))
    ;; ;; (setq rime-disable-predicates nil)
    (setq rime-inline-predicates
          '(rime-predicate-space-after-cc-p))
    (setq rime-inline-ascii-trigger 'shift-l)
    (setq rime-show-candidate 'posframe)
    (define-key rime-mode-map (kbd "M-i") 'rime-force-enable))
        #+END_src
** Smart Input Source
Another workaround of using IM inside Emacs. SIS add predicates and switches for system IM so that you can switch to ascii input when switch to mini-buffer, normal mode, etc.. However, enabling ~sis-global-respect-mode~ will cause extreme lag, so I had to comment this package.
#+begin_src emacs-lisp
  (use-package sis
    :straight t
    :config
    (sis-ism-lazyman-config "1" "2" 'fcitx5)
    ;; enable the /respect/ mode
    (sis-global-respect-mode t)
    ;; enable the /context/ mode for all buffers
    (sis-global-context-mode t)
    ;; enable the /inline english/ mode for all buffers
    (sis-global-inline-mode t)
  	;; enable the /cursor color/ mode
    (sis-global-cursor-color-mode t)
    ;; support for meow
    (add-hook 'meow-insert-exit-hook #'sis-set-english)
  	(add-hook 'meow-vterm-insert-mode-hook #'sis-set-english)
    (add-to-list 'sis-context-hooks 'meow-insert-enter-hook))
#+end_src
** Git diffs
#+begin_src emacs-lisp
  (use-package diff-hl
    :straight t
    :init
    (global-diff-hl-mode)
    :hook
    (magit-post-refresh . diff-hl-magit-post-refresh))
#+end_src
* Shell
** eshell
#+begin_src emacs-lisp
  ;; Use pcomplete to generate shell completion
  (use-package pcmpl-args
    :straight t)

  (use-package eshell-toggle
  	:straight (eshell-toggle :type git :host github :repo "4DA/eshell-toggle")
  	:bind ("C-~" . eshell-toggle)
  	:custom
  	(eshell-toggle-find-project-root-package t) ;; for projectile
  	)
#+end_src
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :config
    (if (eq system-type 'darwin)
        (setq vterm-shell "/bin/zsh")
      (setq vterm-shell "/run/current-system/sw/bin/nu"))
    )

  (use-package meow-vterm
  	:straight (meow-vterm :type git :host github :repo "45mg/meow-vterm")
  	:config
  	(add-hook 'vterm-mode-hook #'meow-vterm-mode)
    (meow-define-keys 'vterm-normal
      '("y" . meow-vterm-yank)
      '("Y" . meow-vterm-yank-pop)
      '("u" . meow-vterm-undo)
      '("x" . meow-vterm-yank)
      '("X" . meow-vterm-yank-pop)
      '("s" . meow-vterm-kill)
      '("k" . meow-vterm-delete)
      '("D" . meow-vterm-backspace)
      '("G" . ignore)) ; see below
  	)
#+end_src
* Enhancement
** Which-key
#+begin_src emacs-lisp
  ;; Show my keybindings
  (use-package which-key
    :straight t
    :config
    (setq which-key-show-early-on-C-h t)
    (which-key-mode))

  ;; Embark which-key integration
  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator)
#+end_src
** Window management
#+begin_src emacs-lisp
  ;; Better other-window
  (use-package ace-window
    :straight t
    :bind ("M-o" . ace-window)
  	:config
  	;; switch windows inside current frame
  	(setq aw-scope 'frame)
  	)
#+end_src

Some keybindings for built-in emacs window management.
#+begin_src emacs-lisp
  (defun zoom-window()
    "Maximize the window  or bring back the previous layout."
    (interactive)
    (if (window-parent)
        (delete-other-windows)
      (winner-undo)))

  (keymap-global-set "C-x 1" 'zoom-window)
#+end_src
** Projectile
#+begin_src emacs-lisp
  ;; Better project management
  (use-package projectile
    :straight t
    :custom
    (projectile-sort-order 'recently-active)
    (projectile-project-search-path '("~/Projects/"))
    :config
    ;; Fix projectile mode line to increase TRAMP speed
    (add-hook 'find-file-hook
            (lambda ()
              (when (file-remote-p default-directory)
                (projectile-mode -1))))
    
    (projectile-mode +1))

  ;; (use-package project)
#+end_src
** Dirvish
#+begin_src emacs-lisp
  (use-package dirvish
    :straight t
    :hook
    (dirvish-find-entry .
                        (lambda (&rest _) (setq-local truncate-lines t)))
    :init
    ;; (dirvish-peek-mode)
    (dirvish-override-dired-mode)
    :bind
    (("C-x d"	.	dirvish)
     ("C-c f d"	.	dirvish-fd)
     :map dirvish-mode-map
     ("a"		.	dirvish-quick-access)
     ("f"		.	dirvish-file-info-menu)
     ("y"		.	dirvish-yank-menu)
     ("N"		.	dirvish-narrow)
     ("^"		.	dirvish-history-last) ; remapped `dired-up-directory'
     ("s"		.	dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
     ("v"		.	dirvish-vc-menu)      ; remapped `dired-view-file'
     ("h"		.	dired-up-directory)   ; remapped `describe-mode'
     ("H"		.	dirvish-history-jump)
     ("t"		.	dired-find-file)      ; remapped `dired-toggle-marks'
     ("T"		.	dired-toggle-marks)
     ("`"         .       dired-omit-mode)
     ("TAB"	.	dirvish-subtree-toggle)
     ("M-f"	.	dirvish-history-go-forward)
     ("M-b"	.	dirvish-history-go-backward)
     ("M-l"	.	dirvish-ls-switches-menu)
     ("M-m"	.	dirvish-mark-menu)
     ("M-t"	.	dirvish-layout-toggle)
     ("M-s"	.	dirvish-setup-menu)
     ("M-e"	.	dirvish-emerge-menu)
     ("M-j"	.	dirvish-fd-jump))
    :custom
    (dirvish-attributes '(all-the-icons
                          git-msg
                          collapse
                          file-size
                          file-time))
    (delete-by-moving-to-trash t) ; Delete to trash
    (dired-listing-switches
     "-l --almost-all --human-readable --group-directories-first --no-group")
    (dirvish-quick-access-entries
     '(("h" "~/"                          "Home")
       ("d" "~/Downloads/"                "Downloads")
       ("n" "~/org/"                      "Org notes")
       ("p" "~/Projects/"                 "Projects")
       ("e" "~/.emacs.d/"                 "Emacs")
       ("t" "~/.local/share/Trash/files/" "Trash Can")))
    ;; Ignore some files
    (dired-omit-files
     (rx (or (seq bol (? ".") "#")         ;; emacs autosave files
             (seq bol "." (not (any "."))) ;; dot-files
             (seq "~" eol)                 ;; backup-files
             (seq bol "CVS" eol)           ;; CVS dirs
             )))
    ;; Enable mouse drag-and-drop. Available for Emacs 29 and later.
    (if (not (version< emacs-version "29"))
        (setq dired-mouse-drag-files t
  	    mouse-drag-and-drop-region-cross-program t))
    )
#+end_src
** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :straight (treemacs
               :type git
               :repo "Alexander-Miller/treemacs")
    :bind (("M-0"     . treemacs-select-window)
           ("C-c t 1" . treemacs-delete-other-windows)
           ("C-c t t" . treemacs)
           ("C-c t d" . treemacs-select-directory)
           ("C-c t B" . treemacs-bookmark)
           :map treemacs-mode-map
           ("f v"     . treemacs-find-file)
           ("f t"     . treemacs-find-tag))
    :custom
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-is-never-other-window t)
    (treemacs-follow-after-init t)
    (treemacs-hide-gitignored-files-mode t)
    (treemacs-sorting 'alphabetic-case-insensitive-asc)
    (treemacs-collapse-dirs 3) ; Combine empty directories into one
    :config
    ;; Recognize packages in treemacs's tag-view
    (add-to-list 'treemacs-elisp-imenu-expression
                 '("Package"
                   "\\(^\\s-*(use-package +\\)\\(\\_<.+\\_>\\)" 2))
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    (treemacs-fringe-indicator-mode 'always))

  ;; (use-package treemacs-tab-bar
  ;;   :straight t
  ;;   :after (treemacs))

  (use-package treemacs-projectile
    :straight t
    :after (treemacs projectile))
#+end_src
** imenu
#+begin_src emacs-lisp
  (use-package imenu
    :config
    ;; Create imenu menu for use-package
    (add-to-list 'imenu-generic-expression
                 '("Package"
                   "\\(^\\s-*(use-package +\\)\\(\\_<.+\\_>\\)" 2)))
#+end_src
** Garbage Collection
#+begin_src emacs-lisp
  ;; Raise gc-cons-threashold while the minibuffer is active
  ;; Borrow from Doom Emacs
  (defun doom-defer-garbage-collection-h ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun doom-restore-garbage-collection-h ()
    ;; Defer it so that commands launched immediately after will enjoy the
    ;; benefits.
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold 800000))))

  (add-hook 'minibuffer-setup-hook #'doom-defer-garbage-collection-h)
  (add-hook 'minibuffer-exit-hook #'doom-restore-garbage-collection-h)
#+end_src
* UI
** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :straight t
    :defer t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t
  	doom-themes-enable-italic t)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    ;; Enable doom theme on treemacs
    (setq doom-themes-treemacs-theme "doom-atom")
    (doom-themes-treemacs-config)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Custom faces
    (custom-set-faces
     '(variable-pitch ((t (:family "LXGW WenKai" :height 128))))
     '(org-block ((t (:inherit fixed-pitch)))))
    )

  (use-package ef-themes
    :straight t
    :config
    (setq ef-themes-to-toggle '(ef-winter ef-frost))
    (setq ef-themes-mixed-fonts t
  	ef-themes-variable-pitch-ui t)
    ;; (setq ef-themes-headings ; read the manual's entry or the doc string
    ;;     '((0 variable-pitch light 1.9)
    ;;       (1 variable-pitch light 1.8)
    ;;       (2 variable-pitch regular 1.7)
    ;;       (3 variable-pitch regular 1.6)
    ;;       (4 variable-pitch regular 1.5)
    ;;       (5 variable-pitch 1.4) ; absence of weight means `bold'
    ;;       (6 variable-pitch 1.3)
    ;;       (7 variable-pitch 1.2)
    ;;       (t variable-pitch 1.1)))
    )

  (defun yu/load-theme () (load-theme 'ef-frost t))

  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'yu/load-theme)
    (yu/load-theme))
#+end_src
** Mode line
#+begin_src emacs-lisp
  (use-package awesome-tray
    :straight (awesome-tray :host github :repo "manateelazycat/awesome-tray")
    :init
    (awesome-tray-mode 1)
    :config
    (setq awesome-tray-meow-show-mode t)
    
    (defun yu/module-org-clock ()
      "The module for awesome-tray that display org-clock timer."
      (if org-clock-is-active
  	(format "<Task: %s>" org-clock-string)
        ""))
    (defface yu/module-org-clock-face
      '((t (:italic t)))
      "Org-clock module face."
      :group 'awesome-tray)
    (add-to-list 'awesome-tray-module-alist '("org-clock" . (yu/module-org-clock yu/module-org-clock-face)))
    
    (setq awesome-tray-active-modules '("org-clock" "meow" "git" "location" "belong" "file-path" "mode-name" "flycheck")))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
  	:init
    (setq initial-buffer-choice 'dashboard-open)
  	:bind (:map dashboard-mode-map
  							("n" . dashboard-next-line)
  							("t" . dashboard-previous-line)
  							("N" . dashboard-next-section)
  							("T" . dashboard-previous-section))
    :custom
    (dashboard-startup-banner '2)
    (dashboard-projects-backend 'projectile) ; Get projects from projectile
    ;; (dashboard-page-separator "\n\f\n")      ; Use page-break-lines
    (dashboard-center-content t)             ; Put content right
    (dashboard-agenda-release-buffers t)
    (dashboard-icon-type 'nerd-icons)
    (dashboard-set-heading-icons nil)
    (dashboard-set-file-icons nil)
    :config
    (dashboard-modify-heading-icons '((recents . "nf-oct-history")
  				    (projects . "nf-oct-rocket")
  				    (bookmarks . "nf-oct-bookmark")))
    (add-to-list 'dashboard-items '(projects . 5) t)
    (setq initial-buffer-choice
          (lambda ()
  	  (get-buffer-create dashboard-buffer-name) ; Show dashboard with emacsclient
  	  ))
    (dashboard-setup-startup-hook)
    )
#+end_src
** Icons
#+begin_src emacs-lisp
  ;; All-the-icons
  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))

  ;; Nerd icons for terminal support
  (use-package nerd-icons
    :straight t
    :config
    (setq kind-icon-use-icons nil)
    (setq kind-icon-mapping
          `(
            (array ,(nerd-icons-codicon "nf-cod-symbol_array") :face font-lock-type-face)
            (boolean ,(nerd-icons-codicon "nf-cod-symbol_boolean") :face font-lock-builtin-face)
            (class ,(nerd-icons-codicon "nf-cod-symbol_class") :face font-lock-type-face)
            (color ,(nerd-icons-codicon "nf-cod-symbol_color") :face success)
            (command ,(nerd-icons-codicon "nf-cod-terminal") :face default)
            (constant ,(nerd-icons-codicon "nf-cod-symbol_constant") :face font-lock-constant-face)
            (constructor ,(nerd-icons-codicon "nf-cod-triangle_right") :face font-lock-function-name-face)
            (enummember ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
            (enum-member ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
            (enum ,(nerd-icons-codicon "nf-cod-symbol_enum") :face font-lock-builtin-face)
            (event ,(nerd-icons-codicon "nf-cod-symbol_event") :face font-lock-warning-face)
            (field ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-variable-name-face)
            (file ,(nerd-icons-codicon "nf-cod-symbol_file") :face font-lock-string-face)
            (folder ,(nerd-icons-codicon "nf-cod-folder") :face font-lock-doc-face)
            (interface ,(nerd-icons-codicon "nf-cod-symbol_interface") :face font-lock-type-face)
            (keyword ,(nerd-icons-codicon "nf-cod-symbol_keyword") :face font-lock-keyword-face)
            (macro ,(nerd-icons-codicon "nf-cod-symbol_misc") :face font-lock-keyword-face)
            (magic ,(nerd-icons-codicon "nf-cod-wand") :face font-lock-builtin-face)
            (method ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
            (function ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
            (module ,(nerd-icons-codicon "nf-cod-file_submodule") :face font-lock-preprocessor-face)
            (numeric ,(nerd-icons-codicon "nf-cod-symbol_numeric") :face font-lock-builtin-face)
            (operator ,(nerd-icons-codicon "nf-cod-symbol_operator") :face font-lock-comment-delimiter-face)
            (param ,(nerd-icons-codicon "nf-cod-symbol_parameter") :face default)
            (property ,(nerd-icons-codicon "nf-cod-symbol_property") :face font-lock-variable-name-face)
            (reference ,(nerd-icons-codicon "nf-cod-references") :face font-lock-variable-name-face)
            (snippet ,(nerd-icons-codicon "nf-cod-symbol_snippet") :face font-lock-string-face)
            (string ,(nerd-icons-codicon "nf-cod-symbol_string") :face font-lock-string-face)
            (struct ,(nerd-icons-codicon "nf-cod-symbol_structure") :face font-lock-variable-name-face)
            (text ,(nerd-icons-codicon "nf-cod-text_size") :face font-lock-doc-face)
            (typeparameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
            (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
            (unit ,(nerd-icons-codicon "nf-cod-symbol_ruler") :face font-lock-constant-face)
            (value ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-builtin-face)
            (variable ,(nerd-icons-codicon "nf-cod-symbol_variable") :face font-lock-variable-name-face)
            (t ,(nerd-icons-codicon "nf-cod-code") :face font-lock-warning-face))))
#+end_src
** Page break lines
#+begin_src emacs-lisp
  ;; Use awesome page break lines
  (use-package page-break-lines
    :straight t
    :defer t
    :init
    (global-page-break-lines-mode))
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
  ;; Add color to brackets
  (use-package rainbow-delimiters
    :straight t
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (use-package display-line-numbers
    :config
    (defcustom display-line-numbers-exempt-modes
      '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode
                   treemacs-mode dashboard-mode org-mode which-key-mode
  		 vterm-mode org-mode occur-mode pdf-view-mode)
      "Major modes on which to disable line numbers."
      :group 'display-line-numbers
      :type 'list
      :version "green")

    (defun display-line-numbers--turn-on ()
      "Turn on line numbers except for certain major modes.
  Exempt major modes are defined in `display-line-numbers-exempt-modes'."
      (unless (or (minibufferp)
                  (member major-mode display-line-numbers-exempt-modes))
        (display-line-numbers-mode)))

    (global-display-line-numbers-mode)
    ; (global-hl-line-mode) ; Highlight current line
    )
#+end_src
** Pulsar
#+begin_src emacs-lisp
  (use-package pulsar
    :straight t
    :defer t
    :custom
    (puls-pulse t)
    (pulsar-delay 0.055)
    (pulsar-iterations 10)
    (pulsar-face 'pulsar-magenta)
    (pulsar-highlight-face 'pulsar-yellow)
    :init
    (pulsar-global-mode 1)
    :hook
    (next-error . pulsar-pulse-line)

    ;; integration with the `consult' package
    (consult-after-jump . pulsar-recenter-top)
    (consult-after-jump . pulsar-reveal-entry)
    
    ;; integration with the built-in `imenu'
    (imenu-after-jump . pulsar-recenter-top)
    (imenu-after-jump . pulsar-reveal-entry)
    :config
    (add-to-list 'pulsar-pulse-functions 'ace-window)
    (add-to-list 'pulsar-pulse-functions 'meow-search))
#+end_src
** Font
#+begin_src emacs-lisp
  ;; Set up font
  (if (eq system-type 'gnu/linux)
      (add-to-list 'default-frame-alist
  		 '(font . "Maple Mono SC NF-12"))
    (add-to-list 'default-frame-alist
  	       '(font . "Maple Mono NF CN-16")))

  ;; (use-package cnfonts
  ;;   :straight t
  ;;   :bind
  ;;   ("C--" . #'cnfonts-decrease-fontsize)
  ;;   ("C-=" . #'cnfonts-increase-fontsize)
  ;;   :config
  ;;   (setq cnfonts-use-face-font-rescale t)
  ;;   (setq cnfonts-personal-fontnames '(("Mono Lisa")
  ;; 				     ("LXGW WenKai Mono" "LXGW WenKai"
  ;; 				      "LXGW WenKai Screen")
  ;; 						 ("Maple Mono SC NF")))
  ;;   (cnfonts-mode 1)
  ;;   )

  ;; Add spacing between CJK and ASCII characters
  (use-package pangu-spacing
    :straight t
    :config
    (global-pangu-spacing-mode 1))

  ;; Add font ligatures, only support Emacs 28+ with Harfbuzz enabled
  (use-package ligature
    :straight t
    :config
    (ligature-set-ligatures 'prog-mode '("-->" "->" "->>" "-<" "--<"
                                         "-~" "]#" ".-" "!=" "!=="
                                         "#(" "#{" "#[" "#_" "#_("
                                         "/=" "/==" "|||" "||" ;; "|"
                                         "==" "===" "==>" "=>" "=>>"
                                         "=<<" "=/" ">-" ">->" ">="
                                         ">=>" "<-" "<--" "<->" "<-<"
                                         "<!--" "<|" "<||" "<|||"
                                         "<|>" "<=" "<==" "<==>" "<=>"
                                         "<=<" "<<-" "<<=" "<~" "<~>"
                                         "<~~" "~-" "~@" "~=" "~>"
                                         "~~" "~~>" ".=" "..=" "---"
                                         "{|" "[|" ".."  "..."  "..<"
                                         ".?"  "::" ":::" "::=" ":="
                                         ":>" ":<" ";;" "!!"  "!!."
                                         "!!!"  "?."  "?:" "??"  "?="
                                         "**" "***" "*>" "*/" "#:"
                                         "#!"  "#?"  "##" "###" "####"
                                         "#=" "/*" "/>" "//" "///"
                                         "&&" "|}" "|]" "$>" "++"
                                         "+++" "+>" "=:=" "=!=" ">:"
                                         ">>" ">>>" "<:" "<*" "<*>"
                                         "<$" "<$>" "<+" "<+>" "<>"
                                         "<<" "<<<" "</" "</>" "^="
                                         "%%" "'''" "\"\"\"" ))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
** Emoji
#+begin_src emacs-lisp
  (use-package emojify
    :straight t
  	:hook
  	((telega-root-mode
  		telega-chat-mode) . emojify-mode)
    )
#+end_src
** Breadcrumb
#+begin_src emacs-lisp
  (use-package breadcrumb
    :straight t
    :defer t
    :custom
    (breadcrumb-project-max-length 0.5)
    (breadcrumb-project-crumb-separator "/")
    (breadcrumb-imenu-max-length 1.0)
    (breadcrumb-imenu-crumb-separator " > ")
    :init
    (breadcrumb-mode 1))
#+end_src
** Spacious padding
#+begin_src emacs-lisp
  (use-package spacious-padding
    :straight t
    :defer t
    :init
    (spacious-padding-mode 1)
    :bind
    ([f8] . 'spacious-padding-mode)
    :config
    (setq spacious-padding-widths
          '( :internal-border-width 15
             :header-line-width 4
             :mode-line-width 6
             :tab-width 4
             :right-divider-width 30
             :scroll-bar-width 8)))
#+end_src
** Workspace
#+begin_src emacs-lisp
  (use-package bufler
    :straight (bufler :host github
  		    :repo "alphapapa/bufler.el")
    :init
    (bufler-mode 1)
    :bind
    ("C-c b b" . 'bufler-switch-buffer)
    ("C-c b l" . 'bufler)
    ("C-c b s" . 'bufler-workspace-focus-buffer)
    ("C-c b S" . 'bufler-workspace-frame-set)
    :config
    (require 'bufler-workspace-tabs)
    )
#+end_src
** Miscellaneous
#+begin_src emacs-lisp
  (use-package hl-todo
    :straight t
    :config
    (global-hl-todo-mode)
    (defun my-ef-themes-hl-todo-faces ()
      "Configure `hl-todo-keyword-faces' with Ef themes colors.
  The exact color values are taken from the active Ef theme."
      (ef-themes-with-colors
        (setq hl-todo-keyword-faces
  	    `(("HOLD" . ,yellow)
  	      ("TODO" . ,red)
  	      ("NEXT" . ,blue)
  	      ("THEM" . ,magenta)
  	      ("PROG" . ,cyan-warmer)
  	      ("OKAY" . ,green-warmer)
  	      ("DONT" . ,yellow-warmer)
  	      ("FAIL" . ,red-warmer)
  	      ("BUG" . ,red-warmer)
  	      ("DONE" . ,green)
  	      ("NOTE" . ,blue-warmer)
  	      ("KLUDGE" . ,cyan)
  	      ("HACK" . ,cyan)
  	      ("TEMP" . ,red)
  	      ("FIXME" . ,red-warmer)
  	      ("REVIEW" . ,red)
  	      ("DEPRECATED" . ,yellow)))))

    (add-hook 'ef-themes-post-load-hook #'my-ef-themes-hl-todo-faces)
    )

  (use-package magit-todos
    :after magit
    :straight t
    :config (magit-todos-mode 1))
	#+end_src
* Language
** Tree-sitter
#+begin_src emacs-lisp
  (use-package treesit
    :mode
    (("\\.ts\\'" . typescript-ts-mode))
    :config
    (setq treesit-language-source-alist
  	'(
            ;; Available from the main tree-sitter organization.
            (bash       "https://github.com/tree-sitter/tree-sitter-bash")
            (css        "https://github.com/tree-sitter/tree-sitter-css")
            (go         "https://github.com/tree-sitter/tree-sitter-go")
            (haskell    "https://github.com/tree-sitter/haskell-tree-sitter")
            (html       "https://github.com/tree-sitter/tree-sitter-html")
            (html       "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json       "https://github.com/tree-sitter/tree-sitter-json")
            (python     "https://github.com/tree-sitter/tree-sitter-python")
            (toml       "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx        "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (java       "https://github.com/tree-sitter/tree-sitter-java")

            ;; Available from outside of the main tree-sitter organization.
            (clojure    "https://github.com/sogaiu/tree-sitter-clojure")
            (cmake      "https://github.com/uyha/tree-sitter-cmake")
            (elisp      "https://github.com/Wilfred/tree-sitter-elisp")
            (make       "https://github.com/alemuller/tree-sitter-make")
            (markdown   "https://github.com/ikatyang/tree-sitter-markdown")
            (yaml       "https://github.com/ikatyang/tree-sitter-yaml")
            ))
    (add-to-list 'auto-mode-alist '("\\(?:Dockerfile\\(?:\\..*\\)?\\|\\.[Dd]ockerfile\\)\\'" . dockerfile-ts-mode)))
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("READ\\.md\\'" . gfm-mode))
#+end_src
** Vue
#+begin_src emacs-lisp
  (use-package web-mode
    :straight t
    :mode ("\\.vue\\'" . web-mode)
    :config
    (add-to-list 'eglot-server-programs '(web-mode "vls")))
#+end_src
** React
#+begin_src emacs-lisp
  (use-package treesit
    :mode (("\\.tsx\\'" . tsx-ts-mode)
  	 ("\\.json\\'" . json-ts-mode)))
#+end_src
** Org
*** Org mode
#+begin_src emacs-lisp
  (use-package org
    :straight t
    :preface
    ;; Make most of the default modules opt-in to lighten its first-time load
    ;; delay. I sincerely doubt most users use them all.
    (defvar org-modules
      '(;; ol-w3m
        ;; ol-bbdb
        ol-bibtex
        ;; ol-docview
        ;; ol-gnus
        ;; ol-info
        ;; ol-irc
        ;; ol-mhe
        ;; ol-rmail
        ;; ol-eww
        ))
  	:bind
  	(("C-c n l" . org-store-link)
  	 ("C-c n a" . org-agenda))
    :custom-face
    (org-level-1 ((t (:height 1.4))))
    (org-level-2 ((t (:height 1.3))))
    (org-level-3 ((t (:height 1.15))))
    :hook
    (org-mode . (lambda ()
                  (toggle-truncate-lines nil)))
    :custom
    ;; Org files
    (org-directory "~/org/") ; Note directory
    (org-default-notes-file (concat org-directory "inbox.org")) ; Default entry point
  	(org-agenda-files (list org-directory)) ; Agenda files

    ;; Useful settings
    (org-startup-folded (quote overview)) ; Fold all by default
    (org-hide-emphasis-markers t) ; Hide emphasis markers
    (org-log-done 'time) ; Log time when finish a job
    (org-agenda-inhibit-startup t)
    (org-inhibit-startup t)
    (org-return-follows-link t) ; follow links when press RET
    (org-priority-faces '((?A :foreground "#BF616A")
                          (?B :foreground "#ebcb8b")
                          (?C :foreground "#81A1C1")))
    (org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
       (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
       (sequence "|" "CANCEL(c)")))
    (org-todo-keyword-faces
     '(("TODO" :foreground "#b48ead" :weight normal :underline t) ("NEXT" :foreground "#88c0d0" :weight normal :underline t) ("DONE" :foreground "#a3be8c" :weight normal :underline t)
       ("ISSUE" :foreground "#bf616a" :weight normal :underline t) ("FIXED" :foreground "#a3be8c" :weight normal :underline t)
       ("CANCEL" :foreground "#bf616a" :underline t)))
    (org-image-actual-width '(400))
    (org-reveal-root "https://revealjs.com")
  	(setq org-use-sub-superscripts "{}") ; use a_{b} style to show subscripts
  	)
#+end_src
*** Org appearance
#+begin_src emacs-lisp
  (use-package svg-lib :straight t)
  (use-package org-modern
    :straight t
    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda)
    :config
    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "…"
     org-modern-star 'replace

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")
    )
#+end_src
*** Org capture
#+begin_src emacs-lisp
  (use-package org-capture
    :defer t
    :config
    (setq org-capture-templates '(
                                  ("t" "Todo" entry (file+headline "todo.org" "Task")
                                   "** TODO %?\n")
                                  )))
#+end_src
*** Denote
#+begin_src emacs-lisp
  (use-package denote
    :straight t
    :defer t
    :bind
    ("C-c n n n" . 'denote)
    ("C-c n n d" . 'denote-date)
    ("C-c n n s" . 'denote-subdirectory)
    ("C-c n n t" . 'denote-type)
    ("C-c n n x" . 'denote-org-extras-extract-org-subtree)
    ("C-c n n c" . 'org-capture)
    ("C-c n i" . 'denote-link-or-create)
    ("C-c n I" . 'denote-org-extras-link-to-heading)
    ("C-c n f" . 'denote-open-or-create-with-command)
    ("C-c n j" . 'denote-journal-extras-new-entry)
    ("C-c n b" . 'denote-find-backlink)
    ("C-c n c" . 'denote-region)
    ("C-c n B" . 'denote-backlinks)
    :config
    (setq denote-directory (file-name-concat org-directory "denote/"))

    ;; setup interactive prompt for note creation
    (setq denote-prompts '(title keywords template))

    ;; use org's date selection interface for denote
    (setq denote-date-prompt-use-org-read-date t)

    ;; templates
    (setq denote-templates
  	'((plain . "* ")
  	  (memo . "* Memo\n")
  	  (summary . "* Source\n\n* Summary\n")
  	  (review . ,(concat "* Info"
  			     "\n\n"
  			     "* Review"
  			     "\n"))))

    ;; org-capture integration
    (with-eval-after-load 'org-capture
      (add-to-list 'org-capture-templates
  		 '("n" "New note (with Denote)" plain
  		   (file denote-last-path)
  		   #'denote-org-capture
  		   :no-save t
  		   :immediate-finish nil
  		   :kill-buffer t
  		   :jump-to-captured t)))

    ;; call org-insert-structure-template
    ;; when in org-mode after ~denote-region~
    (defun my-denote-region-org-structure-template (_beg _end)
      (when (derived-mode-p 'org-mode)
        (activate-mark)
        (call-interactively 'org-insert-structure-template)))

    (add-hook 'denote-region-after-new-note-functions
  	    #'my-denote-region-org-structure-template)

    ;; Exclude assets folders from operations
    (setq denote-excluded-directories-regexp (rx (| "data" "ltximg")))

    ;; show context in backlink buffer
    (setq denote-backlinks-show-context t)
    ;; show the backlink buffer in the left side window
    (setq denote-link-backlinks-display-buffer-action
  	'((display-buffer-reuse-window
             display-buffer-in-side-window)
            (side . left)
            (slot . 99)
            (window-width . 0.3)))

    ;; dired integration
    (setq denote-dired-directories
  	(list denote-directory
  	      (expand-file-name "project" denote-directory)
  	      (expand-file-name "journal" denote-directory)))

    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)

    ;; automatically rename denote buffers
    (denote-rename-buffer-mode 1)
    )
#+end_src
*** Org appear
#+begin_src emacs-lisp
  (use-package org-appear
    :straight (org-appear
  	     :type git
  	     :host github
  	     :repo "awth13/org-appear")
    :hook
    (org-mode . org-appear-mode)
    (org-mode . (lambda ()
  		(add-hook 'meow-insert-enter-hook
  			  #'org-appear-manual-start
  			  nil
  			  t)
  		(add-hook 'meow-insert-exit-hook
  			  #'org-appear-manual-stop
  			  nil
  			  t)))  		      
    :custom
    (org-appear-autolinks t)
    (org-appear-trigger 'manual))
#+end_src
*** TOC
#+begin_src emacs-lisp
  (use-package toc-org
    :straight t
    :hook
    (org-mode . toc-org-mode)
    (markdown-mode . toc-org-mode))
#+end_src
*** Org noter
#+begin_src emacs-lisp
  (use-package org-noter
  	:straight t
  	:defer t
  	:requires (org pdf-tools)
  	:after pdf-tools)
#+end_src
*** Org download
#+begin_src emacs-lisp
  (use-package org-download
  	:straight t
  	:hook ((dired-mode org-mode) . org-download-enable)
  	:config
  	(setq org-download-method 'attach
  				org-download-screenshot-method "grimblast save area %s"))
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :straight t
    :mode ("\\.rs$" . rustic-mode)
    :config
    (setq rustic-lsp-client 'eglot)
    (setq rustic-indent-method-chain t)
    (setq rustic-format-on-save nil) ;; use lsp-format instead
  	(setq rustic-rustfmt-bin-remote "rustfmt"
  				rustic-rustfmt-args "--edition=2021")
    )
#+end_src
** Toml
#+begin_src emacs-lisp
  (add-to-list 'major-mode-remap-alist
  	     '(conf-toml-mode . toml-ts-mode))
#+end_src
** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :straight t
    :mode "\\.nix\\'")
#+end_src
** Nushell
#+begin_src emacs-lisp
  (use-package nushell-ts-mode
    :straight (nushell-ts-mode :type git :host github :repo "herbertjones/nushell-ts-mode")
    )
#+end_src
** Just
#+begin_src emacs-lisp
  (use-package just-mode
    :straight t
    :mode ("\\justfile\\'" . just-mode))
#+end_src
** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode :straight t)
#+end_src
** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :straight t
    :mode
    (("\\.lua\\'" . lua-mode))
    )
#+end_src
** yuck
#+begin_src emacs-lisp
  (use-package yuck-mode :straight t)
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package ein
    :straight t)

  (use-package python
    :init
    ;; Open python files in tree-sitter mode.
    (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
  	:hook
  	(python-mode . eglot-ensure)
    :config
    (setq python-indent-offset 4)
    (setq python-indent-guess-indent-offset nil)
  	)
#+end_src
** Slint
#+begin_src emacs-lisp

  (use-package slint-mode
  	:straight t)
#+end_src
** R
#+begin_src emacs-lisp
  (use-package ess
  	:straight t
  	:init
  	(setq ess-style 'RStudio)
  	:mode
  	(("\\.[rR]\\'" . R-mode)))

  ;; Setup polymode for Rmarkdown
  (use-package polymode)
  (use-package poly-markdown
  	:straight t
  	:config
  	(add-to-list 'auto-mode-alist '("\\.md$" . poly-markdown-mode)))
  (use-package poly-R
  	:straight t
  	:config
  	(add-to-list 'auto-mode-alist '("\\.Snw$" . poly-noweb+r-mode))
  	(add-to-list 'auto-mode-alist '("\\.Rnw$" . poly-noweb+r-mode))
  	(add-to-list 'auto-mode-alist '("\\.Rmd$" . poly-markdown+r-mode)))
#+end_src
** Java
#+begin_src emacs-lisp
  ;; Configure for packages that use Lombok
  (use-package lsp-java
    :straight t
    :mode ("\\.java\\'" . java-ts-mode) ;; use treesiter
    :custom
    (lsp-inlay-hint-enable t)
    :config
    (add-to-list 'lsp-java-vmargs
                 (format "-javaagent:%s" (expand-file-name "~/.emacs.d/lombok.jar"))
                 t))
#+end_src
** Web developing
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.tcss\\'" . css-ts-mode))
#+end_src
** GraphQL
#+begin_src emacs-lisp
  (use-package graphql-mode
  	:straight t)
#+end_src
* Environment
#+begin_src emacs-lisp
  ;; Integrate with nix-direnv
  ;; I am using devenv to manage project environment
  (use-package envrc
    :straight t
    :hook
    (after-init . envrc-global-mode)
    )
#+end_src
* Tools
** PDF
#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t)
#+end_src
** RSS
[[file+emacs:./etc/elfeed/rmh-elfeed.org][Feeds org file]]
#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :bind
    ("C-c o e" . 'elfeed))

  ;; Use org mode to manage elfeed sources
  (use-package elfeed-org
    :straight t
    :config
    (elfeed-org))

  ;; Customized elfeed UI
  (use-package elfeed-goodies
    :straight t
    :config
    (elfeed-goodies/setup))
#+end_src
** Web
#+begin_src emacs-lisp
  ;; Only customize the default browser for NixOS
  (when (eq system-type 'gnu/linux)
    (setq browse-url-browser-function 'browse-url-generic
  	browse-url-generic-program "qutebrowser"
  	browse-url-generic-args nil)
    )
#+end_src
** Anki
#+begin_src emacs-lisp
  (use-package anki-editor
    :defer t
    :straight (:fork "orgtre"))
#+end_src
** GPT
#+begin_src emacs-lisp
  (use-package gptel
    :straight t
    :config
  	(defun +get-key-from-pass (key)
  		"Get the key from pass-store."
  		(let ((pass (shell-command-to-string (format "pass show %s" key))))
  			(string-trim-right pass))
  		)
    (gptel-make-ollama
     "Ollama"
     :host "localhost:11434"
     :models '("zephyr:latest")
     :stream t)

  	(setq gptel-default-mode 'org-mode)
  	(setq-default
  	 gptel-model "claude-3-opus-20240229"
  	 gptel-backend 	(gptel-make-anthropic "Claude"
  										:stream t
  										:key (+get-key-from-pass "api/anthropic"))
  	 )
  	)
#+end_src
** Aidermacs
#+begin_src emacs-lisp
  (defun get-api-key (key-name)
    "Retrieve the API key from pass based on KEY-NAME.
  Example usage: (get-api-key \"api/claude\") or (get-api-key \"api/openai\")"
    (condition-case err
        (let ((key (string-trim (shell-command-to-string (format "pass show %s" key-name)))))
          (if (string-match-p "^Error:" key)
              (progn
                (message "Failed to retrieve API key %s: %s" key-name key)
                nil)
            key))
      (error
       (message "Error retrieving API key %s: %s" key-name (error-message-string err))
       nil)))

  (use-package aidermacs
  	:straight t
  	:bind (("C-c a" . aidermacs-transient-menu))
  	:config
  	(setenv "ANTHROPIC_API_KEY" (get-api-key "api/anthropic"))
  	(setenv "OPENROUTER_API_KEY" (get-api-key "api/openrouter"))
  	;; use Shift + Enter to change line
  	(setq aidermacs-vterm-multiline-newline-key "S-<return>")
  	:custom
  	(aidermacs-use-architect-mode t)
  	(aidermacs-default-model "anthropic/claude-3-7-sonnet-20250219")
  	(aidermacs-backend 'vterm)
  	)
#+end_src
** Telega
#+begin_src emacs-lisp
  ;; Build by NixOS
  (use-package telega
  	:unless (eq system-type 'gnu/linux)
    :straight t
  	:config
  	(setq telega-emoji-font-family "Noto Color Emoji")
    )
#+end_src
** Password management
#+begin_src emacs-lisp
  (defun pinentry-emacs (desc prompt ok error)
    (let ((str (read-passwd (concat (replace-regexp-in-string "%22" "\"" (replace-regexp-in-string "%0A" "\n" desc)) prompt ": "))))
      str))
#+end_src
